#!/usr/bin/python3
# -*- coding: utf-8 -*-
# key-mapper - GUI for device specific keyboard mappings
# Copyright (C) 2020 sezanzeb <proxima@hip70890b.de>
#
# This file is part of key-mapper.
#
# key-mapper is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# key-mapper is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with key-mapper.  If not, see <https://www.gnu.org/licenses/>.


"""Starts injecting keycodes based on the configuration."""


import sys
import atexit
import getpass
from argparse import ArgumentParser

from keymapper.logger import logger, update_verbosity, log_info
from keymapper.config import iterate_autoload_presets
from keymapper.injector import KeycodeInjector
from keymapper.mapping import Mapping


injectors = {}


def stop():
    """Properly stop the daemon."""
    for injector in injectors:
        injector.stop_injecting()


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument(
        '-d', '--debug', action='store_true', dest='debug',
        help='Displays additional debug information',
        default=False
    )

    options = parser.parse_args(sys.argv[1:])
    update_verbosity(options.debug)
    log_info()

    atexit.register(stop)

    if getpass.getuser() != 'root' and 'unittest' not in sys.modules.keys():
        logger.warn('Without sudo, your devices may not be visible')

    for device, preset in iterate_autoload_presets():
        mapping = Mapping()
        mapping.load(device, preset)
        # TODO keycode injector needs a mapping param,
        # TODO the single custom_mapping only for the UI, because the
        #  service has multiple
        injectors[device] = KeycodeInjector(device, mapping)

    # TODO Dbus server wait for the UI to request applying a different preset
    #  or disabling the injection for a specific device.
