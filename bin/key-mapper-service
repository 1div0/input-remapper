#!/usr/bin/python3
# -*- coding: utf-8 -*-
# key-mapper - GUI for device specific keyboard mappings
# Copyright (C) 2020 sezanzeb <proxima@hip70890b.de>
#
# This file is part of key-mapper.
#
# key-mapper is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# key-mapper is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with key-mapper.  If not, see <https://www.gnu.org/licenses/>.


"""Starts injecting keycodes based on the configuration."""


import sys
import atexit
from argparse import ArgumentParser

import gi
gi.require_version('GLib', '2.0')
from gi.repository import GLib
from pydbus import SessionBus

from keymapper.logger import update_verbosity, log_info, \
    add_filehandler, logger
from keymapper.daemon import Daemon, BUS_NAME
from keymapper.state import system_mapping
from keymapper.dev.permissions import can_read_devices


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument(
        '-d', '--debug', action='store_true', dest='debug',
        help='Displays additional debug information',
        default=False
    )
    parser.add_argument(
        '-n', '--names', action='store_true', dest='names',
        help='Print all available names for the mapping',
        default=False
    )

    options = parser.parse_args(sys.argv[1:])

    update_verbosity(options.debug)
    add_filehandler()
    log_info()

    if options.names:
        # TODO test
        print('\n'.join(system_mapping.list_names()))
        sys.exit(0)

    can_read_devices()

    bus = SessionBus()
    loop = GLib.MainLoop()
    daemon = Daemon(loop)

    try:
        bus.publish(BUS_NAME, daemon)
    except RuntimeError:
        logger.error('The service is already running')
        sys.exit(1)

    daemon.autoload()

    atexit.register(lambda: daemon.stop(True))

    loop.run()
